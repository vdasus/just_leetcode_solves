public class Solution {
    public int Divide(int dividend, int divisor) {
         if (dividend == Int32.MinValue && divisor == -1)
                return Int32.MaxValue;

            int result = 0;

            var signNegative = (divisor < 0) ^ (dividend < 0);

            var modDividend = Math.Abs((long)dividend);
            var modDiv = Math.Abs((long)divisor);

            /* Commented is enough to solve, but below is better
            while (modDividend > 0)
            {
                modDividend -= modDiv;
                if (modDividend >= 0) result++;
            }*/

            while (modDividend >= modDiv)
            {
                var shift = 1;

                while (modDividend >= modDiv << shift) shift++;

                modDividend -= modDiv << (shift - 1);
                result += 1 << (shift - 1);
            }

            return signNegative ? -result : result;
    }
}

/*
public class UnitTest1
    {
        [Theory]
        [InlineData(0, 1, 0)]
        [InlineData(1, 1, 1)]
        [InlineData(2, 1, 2)]
        [InlineData(10, 1, 10)]
        [InlineData(4, 2, 2)]
        [InlineData(5, 2, 2)]
        [InlineData(-5, 2, -2)]
        [InlineData(-5, -2, 2)]
        [InlineData(Int32.MaxValue, Int32.MaxValue, 1)]
        [InlineData(Int32.MinValue, -1, int.MaxValue)]
        [InlineData(Int32.MinValue, -2, 1073741824)]
        [InlineData(Int32.MinValue, -3, 715827882)]
        [InlineData(Int32.MinValue, Int32.MinValue, 1)]
        [InlineData(Int32.MinValue, 1, int.MinValue)]
        [InlineData(1, Int32.MinValue, 0)]
        public void Solution_Divide(int num, int div, int result)
        {
            var sut = Solution.Divide(num, div);
            sut.Should().Be(result);
        }
    }
*/